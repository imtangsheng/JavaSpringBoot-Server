plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.0'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'application'
}
//apply plugin: 'java'
//apply plugin: 'application'

//mainClassName = 'com.robot.RobotServer.Application'

group = 'com.robot'
version = '0.0.1'

java {
	sourceCompatibility = '21'
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator' //Actuator提供相关健康检查、计量和监控端点等功能。通过添加起启动器依赖后,可以实现应用程序的监控和管理。提供/actuator/**统一接入点。
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf' //Thymeleaf 模板中定义 html 文件
	implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-web'

//	Set up Spring Security
//	implementation 'org.springframework.boot:spring-boot-starter-security' //用于应用程序
//  Temporary explicit version to fix Thymeleaf bug
	implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6:3.1.1.RELEASE' //用于 Thymeleaf 和 Spring Security 集成
	implementation 'org.springframework.security:spring-security-test'
	implementation 'org.projectlombok:lombok:1.18.28'//用于测试
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
	//Accessing data with MySQL
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	runtimeOnly 'com.mysql:mysql-connector-j'
//	Using WebSocket to build an interactive web application
	implementation 'org.springframework.boot:spring-boot-starter-websocket'
//	tcp/udp-ip
	implementation "org.springframework.integration:spring-integration-ip:6.2.0"

	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'
//	implementation 'org.springdoc:springdoc-openapi-ui:2.3.0' // 最新版本

//	implementation 'com.github.xiaoymin:knife4j-openapi3-jakarta-spring-boot-starter'

	//log 日志支持
//	implementation 'org.projectlombok:lombok:1.18.30'
	// https://mvnrepository.com/artifact/org.projectlombok/lombok
//	compileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.30'

//	implementation 'org.hibernate:hibernate-core:6.0.6.Final'
}

tasks.named('test') {
	useJUnitPlatform()
}

springBoot {
	mainClass = 'com.robot.RobotServer.Application'
}

bootJar {
	mainClassName = 'com.robot.RobotServer.Application'
}

application {
	mainClassName = 'com.robot.RobotServer.Application'
}

jar {
	archiveBaseName = 'robot'
	archiveVersion =  '0.1.0'
	manifest {
		attributes "Main-Class": 'com.robot.RobotServer.Application'
	}

//	from {
//		configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
//	}
}

//tasks.withType(Jar) {
//	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
//
//	manifest {
//		attributes["Main-Class"] = 'com.robot.RobotServer.Application'
//	}
//}